// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.cosmosdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CassandraClusterState extends com.pulumi.resources.ResourceArgs {

    public static final CassandraClusterState Empty = new CassandraClusterState();

    /**
     * The initial admin password for this Cassandra Cluster.
     * 
     */
    @Import(name="defaultAdminPassword")
    private @Nullable Output<String> defaultAdminPassword;

    /**
     * @return The initial admin password for this Cassandra Cluster.
     * 
     */
    public Optional<Output<String>> defaultAdminPassword() {
        return Optional.ofNullable(this.defaultAdminPassword);
    }

    /**
     * The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    @Import(name="delegatedManagementSubnetId")
    private @Nullable Output<String> delegatedManagementSubnetId;

    /**
     * @return The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    public Optional<Output<String>> delegatedManagementSubnetId() {
        return Optional.ofNullable(this.delegatedManagementSubnetId);
    }

    /**
     * The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    private CassandraClusterState() {}

    private CassandraClusterState(CassandraClusterState $) {
        this.defaultAdminPassword = $.defaultAdminPassword;
        this.delegatedManagementSubnetId = $.delegatedManagementSubnetId;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraClusterState $;

        public Builder() {
            $ = new CassandraClusterState();
        }

        public Builder(CassandraClusterState defaults) {
            $ = new CassandraClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultAdminPassword The initial admin password for this Cassandra Cluster.
         * 
         * @return builder
         * 
         */
        public Builder defaultAdminPassword(@Nullable Output<String> defaultAdminPassword) {
            $.defaultAdminPassword = defaultAdminPassword;
            return this;
        }

        /**
         * @param defaultAdminPassword The initial admin password for this Cassandra Cluster.
         * 
         * @return builder
         * 
         */
        public Builder defaultAdminPassword(String defaultAdminPassword) {
            return defaultAdminPassword(Output.of(defaultAdminPassword));
        }

        /**
         * @param delegatedManagementSubnetId The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder delegatedManagementSubnetId(@Nullable Output<String> delegatedManagementSubnetId) {
            $.delegatedManagementSubnetId = delegatedManagementSubnetId;
            return this;
        }

        /**
         * @param delegatedManagementSubnetId The ID of the delegated management subnet for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder delegatedManagementSubnetId(String delegatedManagementSubnetId) {
            return delegatedManagementSubnetId(Output.of(delegatedManagementSubnetId));
        }

        /**
         * @param location The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Azure Region where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name which should be used for this Cassandra Cluster. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the Resource Group where the Cassandra Cluster should exist. Changing this forces a new Cassandra Cluster to be created.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public CassandraClusterState build() {
            return $;
        }
    }

}
