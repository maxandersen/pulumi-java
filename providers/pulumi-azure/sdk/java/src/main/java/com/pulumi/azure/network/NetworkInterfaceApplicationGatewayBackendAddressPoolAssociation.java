// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azure.network;

import com.pulumi.azure.Utilities;
import com.pulumi.azure.network.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs;
import com.pulumi.azure.network.inputs.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages the association between a Network Interface and a Application Gateway&#39;s Backend Address Pool.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleResourceGroup = new ResourceGroup(&#34;exampleResourceGroup&#34;, ResourceGroupArgs.builder()        
 *             .location(&#34;West Europe&#34;)
 *             .build());
 * 
 *         var exampleVirtualNetwork = new VirtualNetwork(&#34;exampleVirtualNetwork&#34;, VirtualNetworkArgs.builder()        
 *             .addressSpaces(&#34;10.0.0.0/16&#34;)
 *             .location(exampleResourceGroup.getLocation())
 *             .resourceGroupName(exampleResourceGroup.getName())
 *             .build());
 * 
 *         var frontend = new Subnet(&#34;frontend&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.getName())
 *             .virtualNetworkName(exampleVirtualNetwork.getName())
 *             .addressPrefixes(&#34;10.0.1.0/24&#34;)
 *             .build());
 * 
 *         var backend = new Subnet(&#34;backend&#34;, SubnetArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.getName())
 *             .virtualNetworkName(exampleVirtualNetwork.getName())
 *             .addressPrefixes(&#34;10.0.2.0/24&#34;)
 *             .build());
 * 
 *         var examplePublicIp = new PublicIp(&#34;examplePublicIp&#34;, PublicIpArgs.builder()        
 *             .location(exampleResourceGroup.getLocation())
 *             .resourceGroupName(exampleResourceGroup.getName())
 *             .allocationMethod(&#34;Dynamic&#34;)
 *             .build());
 * 
 *         final var backendAddressPoolName = exampleVirtualNetwork.getName().apply(name -&gt; String.format(&#34;%s-beap&#34;, name));
 * 
 *         final var frontendPortName = exampleVirtualNetwork.getName().apply(name -&gt; String.format(&#34;%s-feport&#34;, name));
 * 
 *         final var frontendIpConfigurationName = exampleVirtualNetwork.getName().apply(name -&gt; String.format(&#34;%s-feip&#34;, name));
 * 
 *         final var httpSettingName = exampleVirtualNetwork.getName().apply(name -&gt; String.format(&#34;%s-be-htst&#34;, name));
 * 
 *         final var listenerName = exampleVirtualNetwork.getName().apply(name -&gt; String.format(&#34;%s-httplstn&#34;, name));
 * 
 *         final var requestRoutingRuleName = exampleVirtualNetwork.getName().apply(name -&gt; String.format(&#34;%s-rqrt&#34;, name));
 * 
 *         var network = new ApplicationGateway(&#34;network&#34;, ApplicationGatewayArgs.builder()        
 *             .resourceGroupName(exampleResourceGroup.getName())
 *             .location(exampleResourceGroup.getLocation())
 *             .sku(ApplicationGatewaySku.builder()
 *                 .name(&#34;Standard_Small&#34;)
 *                 .tier(&#34;Standard&#34;)
 *                 .capacity(2)
 *                 .build())
 *             .gatewayIpConfigurations(ApplicationGatewayGatewayIpConfiguration.builder()
 *                 .name(&#34;my-gateway-ip-configuration&#34;)
 *                 .subnetId(frontend.getId())
 *                 .build())
 *             .frontendPorts(ApplicationGatewayFrontendPort.builder()
 *                 .name(frontendPortName)
 *                 .port(80)
 *                 .build())
 *             .frontendIpConfigurations(ApplicationGatewayFrontendIpConfiguration.builder()
 *                 .name(frontendIpConfigurationName)
 *                 .publicIpAddressId(examplePublicIp.getId())
 *                 .build())
 *             .backendAddressPools(ApplicationGatewayBackendAddressPool.builder()
 *                 .name(backendAddressPoolName)
 *                 .build())
 *             .backendHttpSettings(ApplicationGatewayBackendHttpSetting.builder()
 *                 .name(httpSettingName)
 *                 .cookieBasedAffinity(&#34;Disabled&#34;)
 *                 .port(80)
 *                 .protocol(&#34;Http&#34;)
 *                 .requestTimeout(1)
 *                 .build())
 *             .httpListeners(ApplicationGatewayHttpListener.builder()
 *                 .name(listenerName)
 *                 .frontendIpConfigurationName(frontendIpConfigurationName)
 *                 .frontendPortName(frontendPortName)
 *                 .protocol(&#34;Http&#34;)
 *                 .build())
 *             .requestRoutingRules(ApplicationGatewayRequestRoutingRule.builder()
 *                 .name(requestRoutingRuleName)
 *                 .ruleType(&#34;Basic&#34;)
 *                 .httpListenerName(listenerName)
 *                 .backendAddressPoolName(backendAddressPoolName)
 *                 .backendHttpSettingsName(httpSettingName)
 *                 .build())
 *             .build());
 * 
 *         var exampleNetworkInterface = new NetworkInterface(&#34;exampleNetworkInterface&#34;, NetworkInterfaceArgs.builder()        
 *             .location(exampleResourceGroup.getLocation())
 *             .resourceGroupName(exampleResourceGroup.getName())
 *             .ipConfigurations(NetworkInterfaceIpConfiguration.builder()
 *                 .name(&#34;testconfiguration1&#34;)
 *                 .subnetId(frontend.getId())
 *                 .privateIpAddressAllocation(&#34;Dynamic&#34;)
 *                 .build())
 *             .build());
 * 
 *         var exampleNetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(&#34;exampleNetworkInterfaceApplicationGatewayBackendAddressPoolAssociation&#34;, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs.builder()        
 *             .networkInterfaceId(exampleNetworkInterface.getId())
 *             .ipConfigurationName(&#34;testconfiguration1&#34;)
 *             .backendAddressPoolId(network.getBackendAddressPools().apply(backendAddressPools -&gt; backendAddressPools[0].getId()))
 *             .build());
 * 
 *         }
 * }
 * ```
 * 
 * ## Import
 * 
 * Associations between Network Interfaces and Application Gateway Backend Address Pools can be imported using the `resource id`, e.g.
 * 
 * ```sh
 *  $ pulumi import azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/microsoft.network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/applicationGateways/gateway1/backendAddressPools/pool1
 * ```
 * 
 */
@ResourceType(type="azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation")
public class NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the Application Gateway&#39;s Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="backendAddressPoolId", type=String.class, parameters={})
    private Output<String> backendAddressPoolId;

    /**
     * @return The ID of the Application Gateway&#39;s Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> backendAddressPoolId() {
        return this.backendAddressPoolId;
    }
    /**
     * The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="ipConfigurationName", type=String.class, parameters={})
    private Output<String> ipConfigurationName;

    /**
     * @return The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> ipConfigurationName() {
        return this.ipConfigurationName;
    }
    /**
     * The ID of the Network Interface. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="networkInterfaceId", type=String.class, parameters={})
    private Output<String> networkInterfaceId;

    /**
     * @return The ID of the Network Interface. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> networkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(String name) {
        this(name, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(String name, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(String name, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation", name, args == null ? NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(String name, Output<String> id, @Nullable NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation get(String name, Output<String> id, @Nullable NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(name, id, state, options);
    }
}
